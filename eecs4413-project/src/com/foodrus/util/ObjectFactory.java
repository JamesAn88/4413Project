//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.02 at 02:32:34 PM EST 
//


package com.foodrus.util;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Set;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.namespace.QName;

import com.foodrus.bean.ShoppingCart;
import com.foodrus.bean.ShoppingItem;
import com.foodrus.bean.UserProfile;
import com.foodrus.bean.vo.Item;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the generated package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _Order_QNAME = new QName("", "order");
    private static ObjectFactory instance;

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: generated
     * 
     */
    protected ObjectFactory() {
    }
    
    public static ObjectFactory instanceOf(){
    	if (instance == null){
    		instance = new ObjectFactory();
    	}
    	return instance;
    }

    /**
     * Create an instance of {@link OrderType }
     * 
     */
    public OrderType createOrderType() {
        return new OrderType();
    }

    /**
     * Create an instance of {@link CustomerType }
     * 
     */
    public CustomerType createCustomerType() {
        return new CustomerType();
    }

    /**
     * Create an instance of {@link ItemType }
     * 
     */
    public ItemType createItemType() {
        return new ItemType();
    }

    /**
     * Create an instance of {@link ItemsType }
     * 
     */
    public ItemsType createItemsType() {
        return new ItemsType();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OrderType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "order")
    public JAXBElement<OrderType> createOrder(OrderType value) {
        return new JAXBElement<OrderType>(_Order_QNAME, OrderType.class, null, value);
    }
    
    public OrderType createOrder(ShoppingCart cart, UserProfile profile, String hst, String shippingFee, String shippingWaive, String reducedShipping) throws Exception{
    	OrderType order = createOrderType();
    	
    	//customer
    	CustomerType cust = createCustomerType();
    	cust.setAccount(profile.getAccount());
    	cust.setName(profile.getUserName()); //may be null at the moment
    	order.setCustomer(cust);
    	
    	//items
    	ItemsType items = createItemsType();
    	Set<ShoppingItem> shoppingItems = cart.getItems();
    	Iterator<ShoppingItem> ite = shoppingItems.iterator();
    	while (ite.hasNext()){
    		ShoppingItem sitem = ite.next();
    		ItemType itemType = createItemType();
    		Item item = sitem.getItem();
    		itemType.setName(item.getName());
    		itemType.setPrice(BigDecimal.valueOf(item.getPrice()));
    		itemType.setQuantity(BigInteger.valueOf(Integer.valueOf(sitem.getQty())));
    		itemType.setExtended(BigDecimal.valueOf(sitem.getPriceBeforeTax()));
    		String number = item.getNumber();
    		if (number != null){
    			itemType.setNumber(number);
    		}
    		items.getItem().add(itemType);
    	}
    	order.setItems(items);
    	
    	//Total
    	double total = cart.getTotalPriceBeforeTax();
    	order.setTotal(BigDecimal.valueOf(total));
    	
    	//shipping
    	double shipping;
    	double nonReduced = Double.parseDouble(shippingFee);
    	double reduced = Double.parseDouble(reducedShipping);
    	double waived = Double.parseDouble(shippingWaive);
    	if (total < waived){
    		shipping = reduced;
    	} else {
    		shipping = nonReduced;
    	}
    	order.setShipping(BigDecimal.valueOf(shipping));
    	
    	//hst
    	double HST = Double.parseDouble(hst);
    	order.setHST(BigDecimal.valueOf(HST));
    	
    	//grandtotal
    	double grandTotal = (shipping + total) * (HST + 1.0);
    	grandTotal = Math.round(grandTotal * 100);
    	grandTotal = grandTotal/100;
    	order.setGrandTotal(BigDecimal.valueOf(grandTotal));
    
    	//submitted
    	GregorianCalendar gregorianCalendar = new GregorianCalendar();
    	order.setSubmitted(DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar));
    	return order;
    }

}
